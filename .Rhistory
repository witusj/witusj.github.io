# Graph of normal probability density function, with comb of intervals.
meanval = 0.0 # Specify mean of distribution.
sdval = 0.2 # Specify standard deviation of distribution.
xlow = meanval - 3*sdval # Specify low end of x-axis.
xhigh = meanval + 3*sdval # Specify high end of x-axis.
dx = 0.02 # Specify interval width on x-axis
# Specify comb points along the x axis:
x = seq( from = xlow , to = xhigh , by = dx )
# Compute y values, i.e., probability density at each value of x:
y = (1/(sdval*sqrt(2*pi)))*exp(-.5 *((x-meanval)/sdval)ˆ2)
# Plot the function. "plot" draws the intervals. "lines" draws the bell curve.
plot( x , y , type="h" , lwd=1 , cex.axis=1.5
, xlab="x" , ylab="p(x)" , cex.lab=1.5
, main="Normal Probability Density" , cex.main=1.5 )
lines( x , y )
# Approximate the integral as the sum of width * height for each interval.
area = sum( dx * y )
# Display info in the graph.
text( -sdval , .9*max(y) , bquote( paste(mu ," = " ,.(meanval)) )
, adj=c(1,.5) )
text( -sdval , .8*max(y) , bquote( paste(sigma ," = " ,.(sdval)) )
, adj=c(1,.5) )
text( sdval , .9*max(y) , bquote( paste(Delta , "x = " ,.(dx)) )
, adj=c(0,.5) )
text( sdval , .8*max(y) ,
bquote(
paste( sum(,x,) , " " , Delta , "x p(x) = " , .(signif(area,3)) )
) , adj=c(0,.5) )
# Graph of normal probability density function, with comb of intervals.
meanval = 0.0 # Specify mean of distribution.
sdval = 0.2 # Specify standard deviation of distribution.
xlow = meanval - 3*sdval # Specify low end of x-axis.
xhigh = meanval + 3*sdval # Specify high end of x-axis.
dx = 0.02 # Specify interval width on x-axis
# Specify comb points along the x axis:
x = seq( from = xlow , to = xhigh , by = dx )
x
y = (1/(sdval*sqrt(2*pi)))*exp(-.5 *((x-meanval)/sdval)ˆ2)
y = (1/(sdval*sqrt(2*pi)))
y
y = (1/(sdval*sqrt(2*pi)))*exp(-.5*((x-meanval)/sdval)ˆ2)
exp(5)
y = (1/(sdval*sqrt(2*pi)))*exp(-.5)
y
y = (1/(sdval*sqrt(2*pi)))*exp(-.5*(x-meanval)ˆ2)
meanval
x
x^2
y = (1/(sdval*sqrt(2*pi)))*exp(-.5*(x-meanval)^2)
y
# Graph of normal probability density function, with comb of intervals.
meanval = 0.0 # Specify mean of distribution.
sdval = 0.2 # Specify standard deviation of distribution.
xlow = meanval - 3*sdval # Specify low end of x-axis.
xhigh = meanval + 3*sdval # Specify high end of x-axis.
dx = 0.02 # Specify interval width on x-axis
# Specify comb points along the x axis:
x = seq( from = xlow , to = xhigh , by = dx )
# Compute y values, i.e., probability density at each value of x:
y = (1/(sdval*sqrt(2*pi)))*exp(-.5*((x-meanval)/sdval)^2)
# Plot the function. "plot" draws the intervals. "lines" draws the bell curve.
plot( x , y , type="h" , lwd=1 , cex.axis=1.5
, xlab="x" , ylab="p(x)" , cex.lab=1.5
, main="Normal Probability Density" , cex.main=1.5 )
lines( x , y )
# Approximate the integral as the sum of width * height for each interval.
area = sum( dx * y )
# Display info in the graph.
text( -sdval , .9*max(y) , bquote( paste(mu ," = " ,.(meanval)) )
, adj=c(1,.5) )
text( -sdval , .8*max(y) , bquote( paste(sigma ," = " ,.(sdval)) )
, adj=c(1,.5) )
text( sdval , .9*max(y) , bquote( paste(Delta , "x = " ,.(dx)) )
, adj=c(0,.5) )
text( sdval , .8*max(y) ,
bquote(
paste( sum(,x,) , " " , Delta , "x p(x) = " , .(signif(area,3)) )
) , adj=c(0,.5) )
# Some parameter values
w <- 28.0
s <- 10.0
b <- 2.66666666
vars <- 3 # The number of variables in the system.
# Some initial conditions
x <- c(5,5,5)
h <- 0.01 # The step size for the Runge-Kutta
timeserieslength <- 2024 # The number of iterations we will use for the Runge-Kutta
# Initializing some vectors.
deriv <- 1:vars;m <- x;xNEW <- x;
xk1 <- 1:vars;xk2 <- 1:vars;xk3 <- 1:vars;xk4 <- 1:vars;
# We define the Lorenz equations as an R function.
eqs <- function(n){
deriv[1] <- s*(n[2] - n[1])
deriv[2] <- (w*n[1]) - n[2] - (n[1]*n[3])
deriv[3] <- (n[1]*n[2]) - (b*n[3])
return(deriv)
}
# Now we enter the fourth-order Runge-Kutta.
xe <- NULL
for (i in 1:timeserieslength) {
m <- x
derivatives <- eqs(m)
xk1 <- derivatives
m <- x+(.5*h*xk1)
derivatives <- eqs(m)
xk2 <- derivatives
m <- x+(.5*h*xk2)
derivatives <- eqs(m)
xk3 <- derivatives
m <- x + h*xk3
derivatives <- eqs(m)
xk4 <- derivatives
xNEW <- x+((h/6)*(xk1 + (2*xk2) + (2*xk3) + xk4));
# Now we need to collect our computed values.
xe <- rbind(xe,x)
# Now we assign the new variable values to the current values to do the next RK4 iteration.
x <- xNEW
}
# We are done with the Runge-Kutta.
cxe <- cbind(xe,c(1:nrow(xe))) # Adding a counting variable to the data matrix
# cxe
# Now we plot the Lorenz attractor.
# First we get the endpoint coordinates for the axes.
x1max <- max(cxe[,1]);x1min <- min(cxe[,1])
x2max <- max(cxe[,2]);x2min <- min(cxe[,2])
x3max <- max(cxe[,3]);x3min <- min(cxe[,3])
origin <- cbind(x1min,x2min,x3min,timeserieslength+2)
x1next <- cbind(x1max,x2min,x3min,timeserieslength+3)
x2next <- cbind(x1min,x2max,x3min,timeserieslength+4)
x3next <- cbind(x1min,x2min,x3max,timeserieslength+5)
# We are done getting the endpoint coordinates for the axes.
final <- cbind(NA,NA,NA,timeserieslength+1) #To break the plotting of axis lines from the other data
# Now we bind the axes coordinates to the original data matrix
axes <- rbind(origin,rbind(x1next,rbind(origin,rbind(x2next,(rbind(origin,rbind(x3next,final)))))))
trajects <- rbind(axes,cxe)
# trajects
# Translating a 3-D projection onto a 2-D plot
angle <- 2*pi/3
xvalue <- trajects[,1] - ((cos(angle))*trajects[,3])
yvalue <- trajects[,2] - ((sin(angle))*trajects[,3])
# The final plot statement for display
plot(xvalue, yvalue, axes=FALSE, xlab="", ylab="", type="l", lwd=2)
# A pdf version of the plot saved to the R workspace
savePlot(filename = "Lorenz",
type = "pdf")
# Now a 3-D display of the attractor that is rotatable
library(rgl)
plot3d(cxe,lwd=4,type="l",col=rainbow(1000))
sd(c(5,5,12))
which.min(c(4,1,6))
sd(c(5,8,12))
<<voortgang, echo=FALSE, warning=FALSE, message=FALSE, results='hold'>>=
)
overzicht <- as.data.frame(voortgang)
overzicht <- table(voortgang$Volledige.naam.student.,voortgang$Kwaliteit.input)
install.packages("slidify")
install.packages("rchart")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
install(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("devtools")
install.packages(c("cluster", "effects", "evaluate", "fAssets", "gdata", "Hmisc", "httpuv", "ipred", "KernSmooth", "lattice", "lmtest", "maptools", "markdown", "Matrix", "mnormt", "multcomp", "mvtnorm", "network", "nnet", "prodlim", "qcc", "raster", "rgdal", "rgl", "RGtk2", "robustbase", "rpart", "RQDA", "RTextTools", "shiny", "slam", "sp", "spam", "survival", "tau", "TH.data", "tree", "XLConnect", "xtable"))
install.packages(c("cluster", "effects", "evaluate", "fAssets",
install.packages(c("cluster", "effects", "evaluate", "fAssets", "gdata", "Hmisc", "httpuv", "ipred", "KernSmooth", "lattice", "lmtest", "maptools", "markdown", "Matrix", "mnormt", "multcomp", "mvtnorm", "network", "nnet", "prodlim", "qcc", "raster", "rgdal", "rgl", "RGtk2", "robustbase", "rpart", "RQDA", "RTextTools", "shiny", "slam", "sp", "spam", "survival", "tau", "TH.data", "tree", "XLConnect", "xtable"))
install.packages(c("cluster", "effects", "evaluate", "fAssets",
install.packages("devtools")
install.packages("C:/Users/NB/Downloads/devtools_1.5.zip", repos = NULL)
library(devtools)
install_github('rCharts', 'ramnathv')
install.packages("C:/Users/NB/Downloads/devtools_1.5.zip", repos = NULL)
require(devtools)
install.packages("devtools")
install.packages("fPortfolio")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("knitr")
install.packages("xtable")
install.packages("reshape2")
install.packages("tm")
install.packages("SnowballC")
install.packages("ggplot2")
install.packages("tables")
install.packages("RgoogleMaps")
auth = getGoogleAuth("wfth1969@gmail.com", mila1999)
library(rgoogledocs)
auth = getGoogleAuth("wfth1969@gmail.com", mila1999)
install.packages("C:/Users/NB/Downloads/RGoogleDocs_0.7-0.tar.gz", repos = NULL, type = "source")
library(rgoogledocs)
library(RGoogleDocs)
install.packages("C:/Users/NB/Downloads/RGoogleDocs_0.7-0.tar.gz", repos = NULL, type = "source")
install.packages("rgoogledata")
install.packages("C:/Users/NB/Downloads/RWordPress_0.2-3.tar.gz", repos = NULL, type = "source")
install.packages("gWidgetsWWW")
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
library(gWidgetsWWW)
w <- gwindow("Hello world example")
g <- ggroup(container = w)
b <- gbutton("Click me", container = g)
addHandlerClicked(b, handler = function(h, ...) {
galert("Hello world", parent = w)
})
visible(w) <- TRUE
gw_browseEnv()
install.packages("RTextTools")
gw_browseEnv()
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
install.packages("C:/Users/NB/Downloads/canvas_0.3-0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/NB/Downloads/canvas_0.3-0.zip", repos = NULL)
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
install.packages("C:/Users/NB/Downloads/canvas_0.3-0 (1).zip", repos = NULL)
install.packages('canvas',,'http://www.rforge.net/'
install.packages('canvas',,'http://www.rforge.net/')
install.packages('canvas',,'http://www.rforge.net/')
install.packages("C:/Users/NB/Downloads/canvas_0.3-0.zip", repos = NULL)
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(....) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(....) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
plotIt()
canvas(f, width = width, height = height)
install.packages("knitr")
library(gWidgetsWWW)
localServerOpen('Examples/ex-simple-gui.R', package='gWidgetsWWW')
library(gWidgetsWWW)
localServerOpen('Examples/ex-simple-gui.R', package='gWidgetsWWW')
install.packages("exams")
install.packages("RSVGTipsDevice")
install.packages("C:/Users/NB/Downloads/exams_1.9-6.zip", repos = NULL)
install.packages(RSVGTipsDevice)
install.packages(RSVGTipsDevice, "http://cran.us.r-project.org")
install.packages(RSVGTipsDevice, repos="http://cran.us.r-project.org")
install.packages(RSVGTipsDevice, repos = getOption("http://cran.us.r-project.org"))
library("exams")
exams2pdf("tstat.Rnw")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("tth")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("base64enc")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("shiny")
runDeck('Index.rmd')
library(slidify)
runDeck('Index.rmd')
setwd("~/GitHub/Slidify/frits")
runDeck('Index.rmd')
runDeck('Index.rmd')
runDeck('index.rmd')
runDeck('index.Rmd')
slidify('index.Rmd')
runDeck()
runDeck()
setwd("~/GitHub/witusj.github.io/quizii")
runDeck()
slidify()
setwd("~/GitHub/witusj.github.io")
slidify()
slidify('index.rmd')
