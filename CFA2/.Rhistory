# Create a grade data frame for all users in a given course
lstGrades <- AllGrades(lstEnrolUsers, dfGrades, dfGrade_Items)
dfGrade_Overv <- dcast(lstGrades$grades, moodleID + firstname + lastname + email + group ~ itemname, value.var = "finalgrade", fun.aggregate = max)
View(dfGrade_Overv)
install.packages("readr")
install.packages("plot3D")
shiny::runApp('Google Drive/Moodle/Moodle/CFA2015P1')
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- tbl(con, "mdl_logstore_standard_log")
head(my_tbl)
my_tbl
str(my_tbl)
dim(my_tbl)
my_tbl$select
select(my_tbl, 1:21)
df <- as.data.frame(select(my_tbl, 1:21))
df <- as.data.frame(select(my_tbl, 1:21))
df
View(df)
df <- as.data.frame(select(my_tbl, 1:21, n=-1))
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- tbl(con, "mdl_logstore_standard_log")
df <- collect(my_tbl)
View(df)
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- tbl(con, "mdl_logstore_standard_log")
df <- collect(my_tbl)
View(df)
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- con %>%
tbl(con, "mdl_logstore_standard_log") %>%
filter(courseid = 2)
df <- collect(my_tbl)
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- con %>%
tbl("mdl_logstore_standard_log") %>%
filter(courseid = 2)
df <- collect(my_tbl)
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- con %>% tbl("mdl_logstore_standard_log") %>% filter(courseid = 2)
df <- collect(my_tbl)
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- con %>% tbl("mdl_logstore_standard_log") %>% filter(courseid == 2)
df <- collect(my_tbl)
View(df)
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- con %>% tbl("mdl_logstore_standard_log") %>% filter(courseid == 2)
df <- collect(my_tbl)
library(dplyr)
con <- src_mysql(dbname = "bitnami_moodle",
host = "127.0.0.1",
port = 3306,
user = "public1",
password = "test"
)
my_tbl <- con %>% tbl("mdl_logstore_standard_log") %>% filter(courseid == 2)
df <- collect(my_tbl)
View(df)
str(df)
str(df$action)
summary(df)
readinteger <- function()
{
n <- readline(prompt="Please, enter your GUESS: ")
}
repeat
{
response<-as.integer(readinteger());
if (response==42)
{
print("Well done!");
break
} else print("Sorry, the answer to whaterver the question MUST be 42");
}
readinput <- function()
{
n <- readline(prompt="Please, enter SQUARE: ")
}
readquess <- function()
{
n <- readline(prompt="Please, enter your GUESS: ")
}
repeat
{
input<-as.integer(readinput());
guess<-as.integer(readguess());
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- (guess - input/guess)/2;
}
readinput <- function()
{
n <- readline(prompt="Please, enter SQUARE: ")
}
readquess <- function()
{
n <- readline(prompt="Please, enter your GUESS: ")
}
repeat
{
input<-as.integer(readinput());
guess<-as.integer(readguess());
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- (guess - input/guess)/2;
}
readinput <- function()
{
n <- readline(prompt="Please, enter SQUARE: ")
}
readquess <- function()
{
n <- readline(prompt="Please, enter your GUESS: ")
}
repeat
{
input<-as.integer(readinput());
guess<-3;
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- (guess - input/guess)/2;
}
{
n <- readline(prompt="Please, enter SQUARE: ")
}
readquess <- function()
{
n <- readline(prompt="Please, enter your GUESS: ")
}
input<-as.integer(readinput());
repeat
{
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- (guess - input/guess)/2;
}
input<-as.integer(readinput());
input<-as.integer(readinput());
input <- 25
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- (guess - input/guess)/2;
}
input <- 89
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- (guess - input/guess)/2;
}
input <- 89
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- abs(guess - input/guess)/2);
}
input <- 89
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- abs((guess - input/guess)/2);
}
input <- 81
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- abs((guess - input/guess)/2);
}
input <- 121
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.01)
{
print(guess);
break
} else guess <- abs((guess - input/guess)/2);
}
input <- 121
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.00001)
{
print(guess);
break
} else guess <- abs((guess - input/guess)/2);
}
input <- 121
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.00001)
{
print(guess);
break
} else guess <- abs((guess - input/guess)/2);
}
input <- 121
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.001)
{
print(guess);
break
} else guess <- abs((guess - input/guess)/2);
}
input <- 121
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.0001)
{
print(guess);
break
} else guess <- abs((guess - input/guess)/2);
}
input <- 72
guess <- 3
repeat
{
if (abs(guess^2 - input) < 0.0001)
{
print(guess);
break
} else guess <- abs((guess - input/guess)/2);
}
install.packages("devtools")
require(devtools)
install_github("slidify", "ramnathv")
nstall_github("slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("mydeck")
setwd("~/Google Drive/DSI")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/Google Drive/DSI/Slides/mydeck")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/Google Drive/CFA 2014/Dox/Les 1")
author("CFA1")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
author("CFA1")
slidify("index.Rmd")
setwd("~/Google Drive/CFA 2014/Dox/Les 1/CFA1")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/GitHub/witusj.github.io/witusj.github.io/CFA2")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
