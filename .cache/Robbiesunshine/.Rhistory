library(RNeo4j)
Graph = startGraph("http://localhost:7474/db/data/")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
devtools::install_github("rstudio/leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
install.packages("magrittr")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
devtools::install_github("rstudio/leaflet")
install.packages("magrittr")
devtools::install_github("rstudio/leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=4.4833, lat=-52.1667, popup="The birthplace of Witek")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=4.4833, lat=52.1667, popup="The birthplace of Witek")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=4.4775, lat=52.1658, popup="The birthplace of Witek")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=4.4775, lat=52.1658, popup="The birthplace of Witek")
addMarkers(lng=5.886042, lat=51.984946, popup="The birthplace of Robert")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
#addMarkers(lng=4.4775, lat=52.1658, popup="The birthplace of Witek")
addMarkers(lng=5.8860, lat=51.9849, popup="The birthplace of Robert")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=c(4.4775, 5.8860), lat=c(52.1658, 51.9849), popup=c("The birthplace of Witek", "The birthplace of Robert")
#addMarkers(lng=5.8860, lat=51.9849, popup="The birthplace of Robert")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=c(4.4775, 5.8860), lat=c(52.1658, 51.9849),
popup=c("The birthplace of Witek", "The birthplace of Robert"))
#addMarkers(lng=5.8860, lat=51.9849, popup="The birthplace of Robert")
m  # Print the map
lat <- c(52.1658, 51.9849)
txt <- ("Witek, Robert, Mila, Nadia, Leana, Donya")
txt <- sapply(txt, paste0("Hier is ",txt, " geboren."))
txt <- ("Witek, Robert, Mila, Nadia, Leana, Donya")
txt <- sapply(x = 1:length(txt), paste0("Hier is ",txt[x], " geboren."))
txt <- ("Witek, Robert, Mila, Nadia, Leana, Donya")
txt <- apply(txt, 1, function(x) paste0("Hier is ",txt[x], " geboren."))
txt <- ("Witek, Robert, Mila, Nadia, Leana, Donya")
txt <- apply(txt, 2, function(x) paste0("Hier is ",txt[x], " geboren."))
txt <- sapply(c(1:length(txt)), function(x) paste0("Hier is ",txt[x], " geboren."))
txt
txt <- ("Witek, Robert, Mila, Nadia, Leana, Donya")
txt
txt <- c("Witek, Robert, Mila, Nadia, Leana, Donya")
txt <- sapply(c(1:length(txt)), function(x) paste0("Hier is ",txt[x], " geboren."))
txt
txt <- c("Witek", "Robert", "Mila", "Nadia", "Leana", "Donya")
txt <- sapply(c(1:length(txt)), function(x) paste0("Hier is ",txt[x], " geboren."))
txt
library(leaflet)
long <- c(4.4775, 5.8860, 4.7390127, 5.861626)
lat <- c(52.1658, 51.9849, 52.6278566, 51.849010)
txt <- c("Witek", "Robert", "Mila & Nadia", "Leana & Donya")
txt <- sapply(c(1:length(txt)), function(x) paste0("Hier is ",txt[x], " geboren."))
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=long, lat=lat, popup=txt)
#addMarkers(lng=5.8860, lat=51.9849, popup="The birthplace of Robert")
m  # Print the map
library(leaflet)
long <- c(4.4775, 5.8860, 4.7390127, 5.861626)
lat <- c(52.1658, 51.9849, 52.6278566, 51.849010)
txt <- c("is Witek", "is Robert", "zijn Mila & Nadia", "zijn Leana & Donya")
txt <- sapply(c(1:length(txt)), function(x) paste0("Hier ",txt[x], " geboren."))
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=long, lat=lat, popup=txt)
#addMarkers(lng=5.8860, lat=51.9849, popup="The birthplace of Robert")
m  # Print the map
---
title: "Waaro?"
author: "Witek ten Hove"
date: "Wednesday, May 20, 2015"
output: html_document
---
Hallo Robert,
Ik ben me aan het vervelen en ben maar wat onnuttige zaken aan het doen. Ik kwam deze leuke package tegen. Werkt heel handig als je snel mooie kaartjes wilt maken en data wilt toevoegen:
```{r}
library(leaflet)
long <- c(4.4775, 5.8860, 4.7390127, 5.861626) # Longitudes voor Leiden, Arnhem, Alkmaar en Nijmegen
lat <- c(52.1658, 51.9849, 52.6278566, 51.849010) # Idem voor Latitudes
txt <- c("is Witek", "is Robert", "zijn Mila & Nadia", "zijn Leana & Donya") # Namen en werkwoord voor in pop-up
txt <- sapply(c(1:length(txt)), function(x) paste0("Hier ",txt[x], " geboren.")) # Volledige pop-up tekst
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=long, lat=lat, popup=txt)
#addMarkers(lng=5.8860, lat=51.9849, popup="The birthplace of Robert")
m  # Print the map
```
setwd("~/GitHub/Robbiesunshine")
install.packages("corrgram")
install.packages("MethComp")
# libraries
library(ggplot2)
library(corrgram)
library(MethComp)
# read file
HCV_ICL3 <- read.csv("HCV_ICL3.csv")
View(HCV_ICL3)
summary(HCV_ICL3)
x <- HCV_ICL3$ICL
y <- HCV_ICL3$BioS
# derive difference
mean(x)
mean(y)
# mean ICL - mean BioS
mean(x)-mean(y)
HCV_ICL3$diff <- x-y
HCV_ICL3$diff
# Because n=8 is small, the distribution of the differences should be
# approximately normal. Check using a boxplot and QQ plot.
# There is some skew.
boxplot(HCV_ICL3$diff)
qqnorm(HCV_ICL3$diff)
qqline(HCV_ICL3$diff)
# Shaphiro test of normality.
shapiro.test(HCV_ICL3$diff)
# The normality test gives p < 0.001, which is small, so we
# reject the null hypothesis that the values are distributed normally.
# Because results do not have a normal distribution,
# the Mann-Whitney-Wilcoxon Test is used instead.
# We can decide whether the population distributions are identical without
# assuming them to follow the normal distribution.
wilcox.test(x, y, paired = TRUE)
# p > 0.05 and therefore the H0 is NOT rejected.
# The two populations are identical.
# Just to see what happens in the Student T-test.
# A paired t-test: one sample, two tests
# H0 = no difference; H1 = mean of 2 tests are different
# mu= a number indicating the true value of the mean
# (or difference in means if you are performing a two sample test).
t.test(x, y, mu=0, paired=T, alternative="greater")
# p = 0.8425. Because p is larger than alpha, we do NOT reject H0.
# In other words, it is unlikely the observed agreements happened by chance.
# However, because the populations do not have a normal distribution, we can not use
# the outcome if this test.
# Correlation
cor.test(x, y,
alternative = c("two.sided", "less", "greater"),
method = c("pearson", "kendall", "spearman"),
exact = NULL, conf.level = 0.95)
# drop first column
HCV_ICL3$Nr <- NULL
#ggplot
g <- ggplot(HCV_ICL3, aes(log(ICL), log(BioS)))
# add layers
g +
geom_smooth(method="lm", se=TRUE, col="steelblue", size = 1) +
geom_point(size = 3, aes(colour = x)) +
scale_colour_gradient("IU/ml", high = "red", low = "blue", space = "Lab") +
labs(y = "Reference lab (log IU/ml)") +
labs(x = "Home lab (log IU/ml)") +
theme_bw(base_family = "Helvetica", base_size = 14) +
scale_x_continuous(breaks=c(0,8,10,12,14,16))
# geom_point(alpha = 1/3, size = 4) +
regmod <- lm(y~x, data=HCV_ICL3)
summary(regmod)
# convert table to datafram
as.data.frame.matrix(HCV_ICL3)
# Bland-Altman Analysis
BlandAltman(x, y,
x.name = "Reference lab IU/ml",
y.name = "Home lab IU/ml",
maintit = "Bland-Altman plot for HCV count",
cex = 1,
pch = 16,
col.points = "black",
col.lines = "blue",
limx = NULL,
limy = NULL,
ymax = NULL,
eqax = FALSE,
xlab = NULL,
ylab = NULL,
print = TRUE,
reg.line = FALSE,
digits = 2,
mult = FALSE)
# libraries
library(ggplot2)
library(corrgram)
library(MethComp)
# read file
HCV_ICL3 <- read.csv("HCV_ICL3.csv")
View(HCV_ICL3)
summary(HCV_ICL3)
x <- HCV_ICL3$ICL
y <- HCV_ICL3$BioS
# derive difference
mean(x)
mean(y)
# mean ICL - mean BioS
mean(x)-mean(y)
HCV_ICL3$diff <- x-y
HCV_ICL3$diff
# Because n=8 is small, the distribution of the differences should be
# approximately normal. Check using a boxplot and QQ plot.
# There is some skew.
boxHCV <- boxplot(HCV_ICL3$diff)
normHCV <- qqnorm(HCV_ICL3$diff)
lineHCV <- qqline(HCV_ICL3$diff)
# Shaphiro test of normality.
shapHCV <- shapiro.test(HCV_ICL3$diff)
# The normality test gives p < 0.001, which is small, so we
# reject the null hypothesis that the values are distributed normally.
# Because results do not have a normal distribution,
# the Mann-Whitney-Wilcoxon Test is used instead.
# We can decide whether the population distributions are identical without
# assuming them to follow the normal distribution.
wilcHCV <- wilcox.test(x, y, paired = TRUE)
# p > 0.05 and therefore the H0 is NOT rejected.
# The two populations are identical.
# Just to see what happens in the Student T-test.
# A paired t-test: one sample, two tests
# H0 = no difference; H1 = mean of 2 tests are different
# mu= a number indicating the true value of the mean
# (or difference in means if you are performing a two sample test).
studtHCV <- t.test(x, y, mu=0, paired=T, alternative="greater")
# p = 0.8425. Because p is larger than alpha, we do NOT reject H0.
# In other words, it is unlikely the observed agreements happened by chance.
# However, because the populations do not have a normal distribution, we can not use
# the outcome if this test.
# Correlation
corHCV <- cor.test(x, y,
alternative = c("two.sided", "less", "greater"),
method = c("pearson", "kendall", "spearman"),
exact = NULL, conf.level = 0.95)
# drop first column
HCV_ICL3$Nr <- NULL
#ggplot
g <- ggplot(HCV_ICL3, aes(log(ICL), log(BioS)))
# add layers
g +
geom_smooth(method="lm", se=TRUE, col="steelblue", size = 1) +
geom_point(size = 3, aes(colour = x)) +
scale_colour_gradient("IU/ml", high = "red", low = "blue", space = "Lab") +
labs(y = "Reference lab (log IU/ml)") +
labs(x = "Home lab (log IU/ml)") +
theme_bw(base_family = "Helvetica", base_size = 14) +
scale_x_continuous(breaks=c(0,8,10,12,14,16))
# geom_point(alpha = 1/3, size = 4) +
regmod <- lm(y~x, data=HCV_ICL3)
summary(regmod)
# convert table to datafram
as.data.frame.matrix(HCV_ICL3)
# Bland-Altman Analysis
BlandAltman(x, y,
x.name = "Reference lab IU/ml",
y.name = "Home lab IU/ml",
maintit = "Bland-Altman plot for HCV count",
cex = 1,
pch = 16,
col.points = "black",
col.lines = "blue",
limx = NULL,
limy = NULL,
ymax = NULL,
eqax = FALSE,
xlab = NULL,
ylab = NULL,
print = TRUE,
reg.line = FALSE,
digits = 2,
mult = FALSE)
warnings()
plot(g)
g
g <- ggplot(HCV_ICL3, aes(log(ICL), log(BioS)))
# add layers
g +
geom_smooth(method="lm", se=TRUE, col="steelblue", size = 1) +
geom_point(size = 3, aes(colour = x)) +
scale_colour_gradient("IU/ml", high = "red", low = "blue", space = "Lab") +
labs(y = "Reference lab (log IU/ml)") +
labs(x = "Home lab (log IU/ml)") +
theme_bw(base_family = "Helvetica", base_size = 14) +
scale_x_continuous(breaks=c(0,8,10,12,14,16))
# libraries
library(ggplot2)
library(corrgram)
library(MethComp)
# read file
HCV_ICL3 <- read.csv("HCV_ICL3.csv")
View(HCV_ICL3)
summary(HCV_ICL3)
x <- HCV_ICL3$ICL
y <- HCV_ICL3$BioS
# derive difference
mean(x)
mean(y)
# mean ICL - mean BioS
mean(x)-mean(y)
HCV_ICL3$diff <- x-y
HCV_ICL3$diff
# Because n=8 is small, the distribution of the differences should be
# approximately normal. Check using a boxplot and QQ plot.
# There is some skew.
boxHCV <- boxplot(HCV_ICL3$diff)
normHCV <- qqnorm(HCV_ICL3$diff)
lineHCV <- qqline(HCV_ICL3$diff)
# Shaphiro test of normality.
shapHCV <- shapiro.test(HCV_ICL3$diff)
# The normality test gives p < 0.001, which is small, so we
# reject the null hypothesis that the values are distributed normally.
# Because results do not have a normal distribution,
# the Mann-Whitney-Wilcoxon Test is used instead.
# We can decide whether the population distributions are identical without
# assuming them to follow the normal distribution.
wilcHCV <- wilcox.test(x, y, paired = TRUE)
# p > 0.05 and therefore the H0 is NOT rejected.
# The two populations are identical.
# Just to see what happens in the Student T-test.
# A paired t-test: one sample, two tests
# H0 = no difference; H1 = mean of 2 tests are different
# mu= a number indicating the true value of the mean
# (or difference in means if you are performing a two sample test).
studtHCV <- t.test(x, y, mu=0, paired=T, alternative="greater")
# p = 0.8425. Because p is larger than alpha, we do NOT reject H0.
# In other words, it is unlikely the observed agreements happened by chance.
# However, because the populations do not have a normal distribution, we can not use
# the outcome if this test.
# Correlation
corHCV <- cor.test(x, y,
alternative = c("two.sided", "less", "greater"),
method = c("pearson", "kendall", "spearman"),
exact = NULL, conf.level = 0.95)
# drop first column
HCV_ICL3$Nr <- NULL
#ggplot
g <- ggplot(HCV_ICL3, aes(log(ICL), log(BioS)))
# add layers
g <- g +
geom_smooth(method="lm", se=TRUE, col="steelblue", size = 1) +
geom_point(size = 3, aes(colour = x)) +
scale_colour_gradient("IU/ml", high = "red", low = "blue", space = "Lab") +
labs(y = "Reference lab (log IU/ml)") +
labs(x = "Home lab (log IU/ml)") +
theme_bw(base_family = "Helvetica", base_size = 14) +
scale_x_continuous(breaks=c(0,8,10,12,14,16))
# geom_point(alpha = 1/3, size = 4) +
regmod <- lm(y~x, data=HCV_ICL3)
summary(regmod)
# convert table to datafram
as.data.frame.matrix(HCV_ICL3)
# Bland-Altman Analysis
BlandAltman(x, y,
x.name = "Reference lab IU/ml",
y.name = "Home lab IU/ml",
maintit = "Bland-Altman plot for HCV count",
cex = 1,
pch = 16,
col.points = "black",
col.lines = "blue",
limx = NULL,
limy = NULL,
ymax = NULL,
eqax = FALSE,
xlab = NULL,
ylab = NULL,
print = TRUE,
reg.line = FALSE,
digits = 2,
mult = FALSE)
plot(g)
Validation of Hepatitis C viral count using R-computing
========================================================
This is a test
```{r,echo=FALSE, results='hide'}
# libraries
library(ggplot2)
library(corrgram)
library(MethComp)
# read file
source("HCV_ICL3.R")
View(HCV_ICL3)
```
In a summary. The lower limit of detection (LLD) at home-lab is 12 IU/ml and the LLD at the reference-lab os 20 IU/ml. So, if the result is <20IU/ml, the detected value could be anywhere between 1 and 20. Therefore, the lower limit of detection has been set for home-lab at '6 IU/ml' and '10 IU/ml' for the reference lab.
```{r Summary}
summary(HCV_ICL3)
head(HCV_ICL3)
```
To make it more easy, the set of values from Reference-lab = 'x'. The set of values from Home-lab = 'y'
```{r,echo=FALSE}
x <- HCV_ICL3$ICL
y <- HCV_ICL3$BioS
```
Calculate the means and difference between the two sets (x and y)
```{r Mean}
# derive difference
mean(x)
mean(y)
# mean Ref_lab - mean Home_lab
mean(x)-mean(y)
```
Because n=8 is small, the distribution of the differences should be approximately normal. Check using a boxplot and QQ plot.
There is some skew.
```{r Boxplot}
boxHCV
normHCV
lineHCV
```
Shaphiro test of normality.
```{r Shapiro}
shapHCV
```
The normality test gives p < 0.001, which is small, so we
reject the null hypothesis that the values are distributed normally.
This means that we cannot use the student t-test. Instead, use the Mann-Whitney-Wilcoxon Test, we can decide whether the population distributions are identical without assuming them to follow the normal distribution.
```{r Wilcoxon}
wilcHCV
```
p > 0.05 and therefore the H0 is NOT rejected.
The two populations are identical.
Just to see what happens in the Student T-test.
A paired t-test: one sample, two tests
H0 = no difference; H1 = mean of 2 tests are different
mu= a number indicating the true value of the mean
(or difference in means if you are performing a two sample test).
```{r t-test}
studtHCV
```
p = 0.8425. Because p is larger than alpha, we do NOT reject H0.
In other words, it is unlikely the observed agreements happened by chance.
However, because the populations do not have a normal distribution, we can not use the outcome if this test.
For correlation, three methods are used: pearson, kendall and spearman at a confidence level of 95%.
```{r Correlation}
# correlation of the two methods
corHCV
```
The correlation with the spearman test is 0.9868827. Almost perfect correlation.
```{r,echo=FALSE,results="hide"}
# drop first column
HCV_ICL3$Nr <- NULL
```
Plotting the two methods using logarithmic scales.
```{r Plotting}
plot(g)
```
Summary data on the correlation line.
```{r}
regmod <- lm(y~x, data=HepB_Web)
summary(regmod)
```
The Bland-Altman Analysis. To check if there is a bias.
```{r, echo=FALSE}
df
```
```{r}
BlandAltman(x, y,
x.name = "Reference lab IU/ml",
y.name = "Home lab IU/ml",
maintit = "Bland-Altman plot for HBV count",
cex = 1,
pch = 16,
col.points = "black",
col.lines = "blue",
limx = NULL,
limy = NULL,
ymax = NULL,
eqax = FALSE,
xlab = NULL,
ylab = NULL,
print = TRUE,
reg.line = FALSE,
digits = 2,
mult = FALSE)
```
When the dots are around 0, the two test could be interchanged for a patient. So, the two test can be interchanged. There are, however, some outliners: large difference of viral count between the two labs.
setwd("~/GitHub/Robbiesunshine")
setwd("~/GitHub/Robbiesunshine")
