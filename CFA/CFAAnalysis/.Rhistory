shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('GitHub/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('GitHub/CFA/WK1')
i^2
i
x<-0
y<-1
z<-complex(x,y)
z^2
1+z
z
z<-complex(real=x,imaginary=y)
z
z^2
1+z
z
1-1+0i
1.08^9
1.06^12
1.05^15
1.05^14
shiny::runApp('C:/Users/NB/Google Drive/CFA/R/Quizii/Rekentoets')
shiny::runApp('GitHub/Quizii/Nadi')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=csv"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=csv"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=html"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/ccc?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE#gid=0"
FinData <- readSpreadsheet(url)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
FinData
fix(FinData)
summary(FinData)
str(FinData)
FinData13 <- FinData([Findata$Boekjaar = 2013],)
FinData13 <- FinData[Findata$Boekjaar = 2013]
FinData13 <- FinData([Findata$Boekjaar = 2013],)
FinData13 <- subset(FinData, Boekjaar = 2013)
str(FinData13)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar = 2013)
str(FinData13)
FinData13 <- subset(FinData, Boekjaar == 2013)
str(FinData13)
TotAssVal <- colSums(FinData13$Balanstotaal.activa, na.rm = TRUE)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)
TotAssVal
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotAssVal
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
MeanSolvency
str(FinData13)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * FinData13$Beurskoers.aandelen.ultimo.boekjaar
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
FinData13$MarketCap
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar == 2013)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen.activa, na.rm = TRUE)/1000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotEqBkVal
FinData13$Totaal.eigen.vermogen
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotEqMktVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
TotLiabVal
str(FinData13)
fix(FinData13)
fix(FinData)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar == 2013)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
str(FinData13)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
shiny::runApp('GitHub/CFA/WKOverzicht')
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
unlist(l.ex, recursive = FALSE)
unlist(l.ex, recursive = TRUE)
data1 <- sample(1:100, 10)
data1
summaries <- summary(data1, data2)
summaries
summaries <- summary(c(data1, data2)
summaries <- summary(c(data1, data2))
summaries <- apply(c(data1, data2), summary)
summaries <- apply(c(data1, data2), summary())
summaries <- apply(c(data1, data2), summary(x))
summaries <- lapply(c(data1, data2), summary)
data1 <- sample(1:100, 10)
data2 <- sample(1:100, 10)
summaries <- lapply(c(data1, data2), summary)
summaries
summaries <- lapply(c(data1, data2), summary(x))
data1 <- sample(1:100, 10)
data2 <- sample(1:100, 10)
data <- list(data1, data2)
summaries <- lapply(data, summary)
summaries
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
source('ScoresWK7.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK6"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK7Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK7"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
names(ScoresAll)[13] <- "Score.WK6"
# Calculate weekly scores
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresAll$Score.WK7 <- round(as.numeric(ScoresAll$Score.WK7)/1.6, 1)
# Create overview and calculate mean
ScoresOverv <- ScoresAll[c(22, 23, 24, 1, 25, 26, 27, 29, 30, 3, 8, 13, 18)]
ScoresOverv[is.na(ScoresOverv)] <- 0
SumScr <- rowSums (ScoresOverv[8:11], na.rm = FALSE, dims = 1)
MinScr <- apply(ScoresOverv[,8:11],1,min)
TotScr <- SumScr - MinScr
ScoresOverv$Gemiddelde.Top3 <- round(TotScr/3,1)
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1.y),]
colnames(ScoresOverv)[c(1:3)] <- c('Voor', 'Tussen', 'Achter')
## Count number of sufficient scores in selected groups
table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Nijmegen'
& ScoresOverv$Groep %in% c('C02', 'C03')]<5.5)
## Count number of sufficient scores for location Nijmegen
AvgN <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Nijmegen' & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Groep[ScoresOverv$Locatie == 'Nijmegen' & ScoresOverv$Gemiddelde.Top3 != 0])
## Count number of sufficient scores for location Arnhem
AvgA <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Arnhem' & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Groep[ScoresOverv$Locatie == 'Arnhem' & ScoresOverv$Gemiddelde.Top3 != 0])
## Count number of sufficient scores per education level
AvgOpl <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Opleiding %in% c('MBO', 'HAVO', 'VWO') & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Opleiding[ScoresOverv$Opleiding %in% c('MBO', 'HAVO', 'VWO') & ScoresOverv$Gemiddelde.Top3 != 0])
dimnames(AvgOpl)[[1]] <- c('Voldoende', 'Onvoldoende')
PercVold <- sapply(c(1:3), function(x) round(AvgOpl[1,x]/(AvgOpl[1,x]+AvgOpl[2,x]),2))
AvgOpl <- rbind(AvgOpl, PercVold)
AggGrp <- aggregate(ScoreOverv, by = list(Locatie, Groep), fun = mean, na.rm = TRUE)
## Write tables to Excel
write.csv(ScoresOverv[ScoresOverv$Locatie == 'Nijmegen',], 'ScoresTotN.csv')
write.csv(ScoresOverv[ScoresOverv$Locatie == 'Arnhem',], 'ScoresTotA.csv')
write.csv(AvgN, 'AvgN.csv')
write.csv(AvgA, 'AvgA.csv')
setwd("~/GitHub/CFA/CFAAnalysis")
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
source('ScoresWK7.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK6"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK7Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK7"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
names(ScoresAll)[13] <- "Score.WK6"
# Calculate weekly scores
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresAll$Score.WK7 <- round(as.numeric(ScoresAll$Score.WK7)/1.6, 1)
# Create overview and calculate mean
ScoresOverv <- ScoresAll[c(22, 23, 24, 1, 25, 26, 27, 29, 30, 3, 8, 13, 18)]
ScoresOverv[is.na(ScoresOverv)] <- 0
SumScr <- rowSums (ScoresOverv[8:11], na.rm = FALSE, dims = 1)
MinScr <- apply(ScoresOverv[,8:11],1,min)
TotScr <- SumScr - MinScr
ScoresOverv$Gemiddelde.Top3 <- round(TotScr/3,1)
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1.y),]
colnames(ScoresOverv)[c(1:3)] <- c('Voor', 'Tussen', 'Achter')
## Count number of sufficient scores in selected groups
table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Nijmegen'
& ScoresOverv$Groep %in% c('C02', 'C03')]<5.5)
## Count number of sufficient scores for location Nijmegen
AvgN <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Nijmegen' & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Groep[ScoresOverv$Locatie == 'Nijmegen' & ScoresOverv$Gemiddelde.Top3 != 0])
## Count number of sufficient scores for location Arnhem
AvgA <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Arnhem' & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Groep[ScoresOverv$Locatie == 'Arnhem' & ScoresOverv$Gemiddelde.Top3 != 0])
## Count number of sufficient scores per education level
AvgOpl <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Opleiding %in% c('MBO', 'HAVO', 'VWO') & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Opleiding[ScoresOverv$Opleiding %in% c('MBO', 'HAVO', 'VWO') & ScoresOverv$Gemiddelde.Top3 != 0])
dimnames(AvgOpl)[[1]] <- c('Voldoende', 'Onvoldoende')
PercVold <- sapply(c(1:3), function(x) round(AvgOpl[1,x]/(AvgOpl[1,x]+AvgOpl[2,x]),2))
AvgOpl <- rbind(AvgOpl, PercVold)
AggGrp <- aggregate(ScoreOverv, by = list(Locatie, Groep), fun = mean, na.rm = TRUE)
## Write tables to Excel
write.csv(ScoresOverv[ScoresOverv$Locatie == 'Nijmegen',], 'ScoresTotN.csv')
write.csv(ScoresOverv[ScoresOverv$Locatie == 'Arnhem',], 'ScoresTotA.csv')
write.csv(AvgN, 'AvgN.csv')
write.csv(AvgA, 'AvgA.csv')
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
source('ScoresWK7.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK6"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK7Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK7"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
names(ScoresAll)[13] <- "Score.WK6"
# Calculate weekly scores
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresAll$Score.WK7 <- round(as.numeric(ScoresAll$Score.WK7)/1.6, 1)
# Create overview and calculate mean
ScoresOverv <- ScoresAll[c(22, 23, 24, 1, 25, 26, 27, 29, 30, 3, 8, 13, 18)]
ScoresOverv[is.na(ScoresOverv)] <- 0
ScoresOverv
ScoresOverv[8:11]
str(ScoreOverv)
str(ScoresOverv)
SumScr <- rowSums (ScoresOverv[10:13], na.rm = FALSE, dims = 1)
MinScr <- apply(ScoresOverv[,10:13],1,min)
TotScr <- SumScr - MinScr
ScoresOverv$Gemiddelde.Top3 <- round(TotScr/3,1)
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1.y),]
colnames(ScoresOverv)[c(1:3)] <- c('Voor', 'Tussen', 'Achter')
## Count number of sufficient scores in selected groups
table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Nijmegen'
& ScoresOverv$Groep %in% c('C02', 'C03')]<5.5)
## Count number of sufficient scores for location Nijmegen
AvgN <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Nijmegen' & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Groep[ScoresOverv$Locatie == 'Nijmegen' & ScoresOverv$Gemiddelde.Top3 != 0])
## Count number of sufficient scores for location Arnhem
AvgA <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Locatie == 'Arnhem' & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Groep[ScoresOverv$Locatie == 'Arnhem' & ScoresOverv$Gemiddelde.Top3 != 0])
## Count number of sufficient scores per education level
AvgOpl <- table(ScoresOverv$Gemiddelde.Top3[ScoresOverv$Opleiding %in% c('MBO', 'HAVO', 'VWO') & ScoresOverv$Gemiddelde.Top3 != 0]<5.5,
ScoresOverv$Opleiding[ScoresOverv$Opleiding %in% c('MBO', 'HAVO', 'VWO') & ScoresOverv$Gemiddelde.Top3 != 0])
dimnames(AvgOpl)[[1]] <- c('Voldoende', 'Onvoldoende')
PercVold <- sapply(c(1:3), function(x) round(AvgOpl[1,x]/(AvgOpl[1,x]+AvgOpl[2,x]),2))
AvgOpl <- rbind(AvgOpl, PercVold)
AggGrp <- aggregate(ScoreOverv, by = list(Locatie, Groep), fun = mean, na.rm = TRUE)
## Write tables to Excel
write.csv(ScoresOverv[ScoresOverv$Locatie == 'Nijmegen',], 'ScoresTotN.csv')
write.csv(ScoresOverv[ScoresOverv$Locatie == 'Arnhem',], 'ScoresTotA.csv')
write.csv(AvgN, 'AvgN.csv')
write.csv(AvgA, 'AvgA.csv')
AggGrp <- aggregate(ScoresOverv, by = list(Locatie, Groep), fun = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOverv, by = list(Locatie, Groep), FUN = mean, na.rm = TRUE)
str(ScoresOverv)
AggGrp <- aggregate(ScoresOverv, by = list(Locatie, Groep), FUN = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOverv, by = c(Locatie, Groep), FUN = mean, na.rm = TRUE)
ScoresOverv
AggGrp <- aggregate(ScoresOverv, by = list(Locatie, Groep), FUN = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOverv, by = list(Groep), FUN = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOverv, by = Groep, FUN = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOverv, by = 'Groep', FUN = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOverv, by = list('Groep'), FUN = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOverv, by = list(Groep = Groep), FUN = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOverv, by = list(ScoresOverv$Groep), FUN = mean, na.rm = TRUE)
warnings()
AggGrp <- aggregate(ScoresOverv[10:13], by = list(ScoresOverv$Groep), FUN = mean, na.rm = TRUE)
AggGrp
AggGrp <- aggregate(ScoresOverv[10:13], by = list(ScoresOverv$Locatie, ScoresOverv$Groep), FUN = mean, na.rm = TRUE)
AggGrp
str(ScoresOverv)
AggGrp <- aggregate(ScoresOverv[10:14], by = list(ScoresOverv$Locatie, ScoresOverv$Groep), FUN = mean, na.rm = TRUE)
AggGrp
ScoresOvervNZ <- ScoresOverv[ScoresOverv$Gemiddelde.Top3 != 0]
ScoresOvervNZ <- ScoresOverv[,ScoresOverv$Gemiddelde.Top3 != 0]
ScoresOvervNZ <- ScoresOverv[ScoresOverv$Gemiddelde.Top3 != 0,]
ScoresOvervNZ
AggGrp <- aggregate(ScoresOvervNZ[10:14], by = list(ScoresOverv$Locatie, ScoresOverv$Groep), FUN = mean, na.rm = TRUE)
AggGrp <- aggregate(ScoresOvervNZ[10:14], by = list(ScoresOvervNZ$Locatie, ScoresOvervNZ$Groep), FUN = mean, na.rm = TRUE)
AggGrp
AggGrp <- AggGrp[order(AggGrp$Group.1),]
AggGrp
n(38,19)
choose(38,19)
