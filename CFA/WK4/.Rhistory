install.packages('canvas',,'http://www.rforge.net/'
install.packages('canvas',,'http://www.rforge.net/')
install.packages('canvas',,'http://www.rforge.net/')
install.packages("C:/Users/NB/Downloads/canvas_0.3-0.zip", repos = NULL)
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(....) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(....) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
sapply(list(n, stdev, diff, alpha, b), addHandlerChanged, handler = plotIt)
visible(w) <- TRUE
library(gWidgetsWWW)
require("canvas")
width <- height <- 400
w <- gwindow("Power example")
g <- ggroup(container = w)
cnv <- gcanvas(width = width, height = height, container = g)
f <- gframe("Parameters", container = g, horizontal = FALSE)
glabel("n:", container =f)
n <- gedit(10, container = f)
glabel("Standard Deviation:", container = f)
stdev <- gslider(5, 20, 1, value = 10, container = f)
glabel("True Difference:", container = f)
diff <- gslider(0, 10, by = 1, value = 1, container = f)
glabel("Alpha:", container = f)
vals <- seq(.05, .25, by = 0.05)
alpha <- gcombobox(vals, editable = TRUE, container = f,
coerce.with = as.numeric)
b <- gbutton("Make plot", container = f)
plotIt <- function(...) {
f <- tempfile()
canvas(f, width = width, height = height)
our.power.examp(svalue(n), svalue(stdev) / 10,
svalue(diff), svalue(alpha))
dev.off()
svalue(cnv) <- f
}
plotIt()
plotIt()
canvas(f, width = width, height = height)
install.packages("knitr")
library(gWidgetsWWW)
localServerOpen('Examples/ex-simple-gui.R', package='gWidgetsWWW')
library(gWidgetsWWW)
localServerOpen('Examples/ex-simple-gui.R', package='gWidgetsWWW')
install.packages("exams")
install.packages("RSVGTipsDevice")
install.packages("C:/Users/NB/Downloads/exams_1.9-6.zip", repos = NULL)
install.packages(RSVGTipsDevice)
install.packages(RSVGTipsDevice, "http://cran.us.r-project.org")
install.packages(RSVGTipsDevice, repos="http://cran.us.r-project.org")
install.packages(RSVGTipsDevice, repos = getOption("http://cran.us.r-project.org"))
library("exams")
exams2pdf("tstat.Rnw")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("tth")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("base64enc")
library("exams")
exams2pdf("tstat.Rnw")
exams2html("tstat.Rnw")
install.packages("shiny")
set.seed(10)
x <- rnorm(100)
x <- as.ts(x)
plot(x)
?textInput()
?textInput
??textInput
install.packages("C:/Users/NB/Downloads/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
library('RTools')
install.packages("Rtools")
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL', type = 'source')
install.packages('RMySQL', type = 'source')
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = 'source')
session <- reactive({c('a', 'b', 'c')})
observe({write.csv(session, file='sessions.csv')})
session <- c('a', 'b', 'c')
write.csv(session, file='sessions.csv')
setwd("~/GitHub/Quizii/Quizii_V4")
session <- c('a', 'b', 'c')
write.csv(session, file='sessions.csv')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/Quizii/Quizii_V4")
?flushReact()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
session
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sys.time
sys.time()
Sys.time()
shiny::runApp()
shiny::runApp()
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=TRUE)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("[Ff]inancial", "financial")
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=TRUE)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("a", "a")
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=TRUE)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("financial", "financial")
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=TRUE)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("[f]inancial", "financial")
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=FALSE)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("[Ff]inancial", "financial")
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=FALSE)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("Financial", "financial", ignore.case=TRUE)
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=FALSE, ignore.case=TRUE)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("Financial", "financial")
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=TRUE, ignore.case=TRUE)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("[fF]inancial", "financial")
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=TRUE, ignore.case=F)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("[fF]inancial", "financial")
# Function to check question
chkQuestionOpen <- function(answer, correct) {
message <- if(grepl(correct, answer, perl=TRUE, ignore.case=F)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("a+", "aa")
# Function to check question
chkQuestionOpen <- function(correct, answer) {
message <- if(grepl(correct, answer, perl=TRUE, ignore.case=F)) 'Correct' else 'False'
return(message)}
chkQuestionOpen("a+", "aa")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Functions to calculate score
scrQuestion <- function(result, i) {
vscore <- (result == 'False') * -1
tscore[i] <<- tscore[i] + vscore
return(as.numeric(max(0,tscore[i])))}
tscore <- c(2,2)
tscore[1]
tscore[1]
tscore[2]
# Functions to calculate score
scrQuestion <- function(result, i) {
vscore <- (result == 'False') * -1
tscore[i] <<- tscore[i] + vscore
return(as.numeric(max(0,tscore[i])))}
tscore <- c(2,3)
tscore[2]
scrQuestion('FALSE',1)
scrQuestion('FALSE',1)
shiny::runApp()
shiny::runApp()
#Load questions
questions <- read.csv(file='Vragen.csv', colClasses = 'character', header = TRUE)
questionsMC <- questions[questions$Onderwerp == 'Financial accounting' & questions$Type == 'MC']
questionsMC
questions
#Load questions
questions <- read.csv(file='Vragen.csv', colClasses = 'character', header = TRUE)
questionsMC <- questions[questions$Onderwerp == 'Financial accounting' & questions$Type == 'MC',]
questionsMC
#Load questions
questions <- read.csv(file='Vragen.csv', colClasses = 'character', header = TRUE)
questionsMC <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Type == 'MC',]
questionsMC
#Load questions
questions <- read.csv(file='Vragen.csv', colClasses = 'character', header = TRUE)
questionsMC <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Type == 'MC']
#Load questions
questions <- read.csv(file='Vragen.csv', colClasses = 'character', header = TRUE)
questionsMC <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Type == 'MC',]
questionsMC
#Load questions
questions <- read.csv(file='Vragen.csv', colClasses = 'character', header = TRUE)
questionsMC <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Type == 'MC',]
questionsOpen <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Type == 'Open',]
questionsOpen
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?grepl
grepl("a|b","b")
grepl("[Ff]inancial|[Oo]perational","financial")
grepl("[Ff]inancial|[Oo]perational","operational")
shiny::runApp()
shiny::runApp()
shiny::runApp('~/GitHub/Quizii/Quizii_V6')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
questionsMC
str(questionsMC)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
questionsMC
str(questionsMC)
questionsMC
shiny::runApp()
questionsMC
m
questions <- read.csv(file='Vragen.csv', colClasses = 'character', header = TRUE)
questionsMC <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Subcategorie == 'Vermogensbehoefte' & questions$Type == 'MC',]
questionsOpen <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Subcategorie == 'Vermogensbehoefte' & questions$Type == 'Open',]
questionsMC
questions <- read.csv(file='Vragen.csv', colClasses = 'character', header = TRUE)
questions
str(questions)
summary(questions)
questionsMC <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Subcategorie == 'Vermogensbehoefte' & questions$Type == 'MC',]
questionsMC
shiny::runApp()
questionsMC <- questions[questions$Onderwerp == 'Financial Accounting' & questions$Subcategorie == 'Vermogensbehoefte' & questions$Type == 'MC',]
questionsMC
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
questionsMC
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
m <- sample(3, size =1)
m
m
m <- sample(3, size =1)
m
m <- sample(3, size =1)
m
m <- sample(3, size =1)
m
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
length(questionsMC$Vraag)
questionsMC
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/GitHub/CFA/WK4Asis')
shiny::runApp('~/GitHub/CFA/WK4Asis')
