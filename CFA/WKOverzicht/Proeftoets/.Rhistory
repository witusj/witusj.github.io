fls3 <- c(fls3, paste0('1/',k))
# Question 8
coeff <- sample(c(2:8), 2)
l <- coeff[1]
m <- coeff[2]
txt <- c(txt, paste0('x^',l,'*x^',m,'='))
corr = c(corr, paste0('x^',l+m))
fls1 <- c(fls1, paste0('x^',l*m))
fls2 <- c(fls2, paste0(l+m,'x'))
fls3 <- c(fls3, paste0('x*',l,'*x*',m))
# Question 9
coeff <- sample(c(1:10), 1)
n3 <- 5*coeff
txt <- c(txt, paste0(n3,'/0,2='))
corr = c(corr, n3/0.2)
fls1 <- c(fls1, n3*0.2)
fls2 <- c(fls2, n3/2)
fls3 <- c(fls3, n3*10)
# Question 10
coeff <- sample(c(2:4), 1)
o <- coeff
txt <- c(txt, paste0('Als 5 EUR = 20% en X EUR = ', o*20, '%, dan is X ='))
corr = c(corr, 5*o)
fls1 <- c(fls1, o)
fls2 <- c(fls2, 25)
fls3 <- c(fls3, o-1)
# Question 11
coeff <- sample(c(2, 3, 5, 7, 11), 2)
p <- coeff[1]
q <- coeff[2]
txt <- c(txt, paste0('Als a + b = c en a / b = ', p, ' / ', q, ' dan geldt a / c ='))
corr = c(corr, paste0(p, ' / ', p+q))
fls1 <- c(fls1, round(p/q, 2))
fls2 <- c(fls2, paste0(q, ' / ', p))
fls3 <- c(fls3, paste0(q, ' / ', p+q))
# Question 12
coeff <- sample(c(2, 3, 5, 7, 11), 2)
p <- coeff[1]
q <- coeff[2]
txt <- c(txt, paste0('(', p, ' * a + (a - b) * ', q, ') / ', p, ' ='))
corr = c(corr, paste0('a + (a - b) * ', q, ' / ', p))
fls1 <- c(fls1, paste0('(',(p+1),'*a - b) * ', q, ' / ', p))
fls2 <- c(fls2, paste0((p+1),'*a - b * ', q, ' / ', p))
fls3 <- c(fls3, paste0('a - b * ', q, ' / ', p))
# Question 13
coeff <- sample(c(4, 6, 5, 8, 9), 1)
r <- coeff
txt <- c(txt, paste0('Y = 1 / (1,0', r, ')^t => als t toeneemt dan:'))
corr = c(corr, 'neemt Y af')
fls1 <- c(fls1, 'groeit Y lineair')
fls2 <- c(fls2, 'groeit Y exponentieel')
fls3 <- c(fls3, 'verandert Y niet')
questionsMC <- data.frame(txt, corr, fls1, fls2, fls3, stringsAsFactors = FALSE)
str(questionsMC)
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
withMatjax('tst')
withMathjax('tst')
shiny::withMathJax('tst')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('GitHub/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('GitHub/CFA/WK1')
i^2
i
x<-0
y<-1
z<-complex(x,y)
z^2
1+z
z
z<-complex(real=x,imaginary=y)
z
z^2
1+z
z
1-1+0i
1.08^9
1.06^12
1.05^15
1.05^14
shiny::runApp('C:/Users/NB/Google Drive/CFA/R/Quizii/Rekentoets')
shiny::runApp('GitHub/Quizii/Nadi')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=csv"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=csv"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=html"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/ccc?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE#gid=0"
FinData <- readSpreadsheet(url)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
FinData
fix(FinData)
summary(FinData)
str(FinData)
FinData13 <- FinData([Findata$Boekjaar = 2013],)
FinData13 <- FinData[Findata$Boekjaar = 2013]
FinData13 <- FinData([Findata$Boekjaar = 2013],)
FinData13 <- subset(FinData, Boekjaar = 2013)
str(FinData13)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar = 2013)
str(FinData13)
FinData13 <- subset(FinData, Boekjaar == 2013)
str(FinData13)
TotAssVal <- colSums(FinData13$Balanstotaal.activa, na.rm = TRUE)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)
TotAssVal
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotAssVal
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
MeanSolvency
str(FinData13)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * FinData13$Beurskoers.aandelen.ultimo.boekjaar
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
FinData13$MarketCap
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar == 2013)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen.activa, na.rm = TRUE)/1000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotEqBkVal
FinData13$Totaal.eigen.vermogen
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotEqMktVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
TotLiabVal
str(FinData13)
fix(FinData13)
fix(FinData)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar == 2013)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
str(FinData13)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
## Function to read in Google Spreadsheet (old method)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="", stringsAsFactors = FALSE)
}
## Read in data from Google and correct answers from csv file
TtsData <- google_ss(gid=0, key = "0Aq3Xv-VjVpxSdGs0cTJ0UTNXMmtJYmNVMTBUOU0xQVE")
Correct <- read.csv("Antwoorden.csv", header = TRUE, sep = ",", quote = "\"",
, fill = TRUE, stringsAsFactors = FALSE)
## Create new data frame with selected student data, compare answers with correct solution
## and create per question a new column with scores.
TtsScore <- TtsData[c(2:7, 9)]
TtsScore[8:29] <- sapply(10:31, function(x) 1*grepl(Correct[1,x-9], TtsData[[x]])
+ 1*grepl(Correct[1,x+13], TtsData[[22+x]]))
setwd("C:/Users/NB/Google Drive/CFA/R/Quizii - V2/Proeftoets")
## Function to read in Google Spreadsheet (old method)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="", stringsAsFactors = FALSE)
}
## Read in data from Google and correct answers from csv file
TtsData <- google_ss(gid=0, key = "0Aq3Xv-VjVpxSdGs0cTJ0UTNXMmtJYmNVMTBUOU0xQVE")
Correct <- read.csv("Antwoorden.csv", header = TRUE, sep = ",", quote = "\"",
, fill = TRUE, stringsAsFactors = FALSE)
## Create new data frame with selected student data, compare answers with correct solution
## and create per question a new column with scores.
TtsScore <- TtsData[c(2:7, 9)]
TtsScore[8:29] <- sapply(10:31, function(x) 1*grepl(Correct[1,x-9], TtsData[[x]])
+ 1*grepl(Correct[1,x+13], TtsData[[22+x]]))
TtsScore
## Function to read in Google Spreadsheet (old method)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="", stringsAsFactors = FALSE)
}
## Read in data from Google and correct answers from csv file
TtsData <- google_ss(gid=0, key = "0Aq3Xv-VjVpxSdGs0cTJ0UTNXMmtJYmNVMTBUOU0xQVE")
Correct <- read.csv("Antwoorden.csv", header = TRUE, sep = ",", quote = "\"",
, fill = TRUE, stringsAsFactors = FALSE)
## Create new data frame with selected student data, compare answers with correct solution
## and create per question a new column with scores.
TtsScore <- TtsData[c(2:7, 9)]
TtsScore[8:29] <- sapply(10:31, function(x) Correct[2,x-9]*grepl(Correct[1,x-9], TtsData[[x]])
+ Correct[2,x+13]*grepl(Correct[1,x+13], TtsData[[22+x]]))
## Function to read in Google Spreadsheet (old method)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="", stringsAsFactors = FALSE)
}
## Read in data from Google and correct answers from csv file
TtsData <- google_ss(gid=0, key = "0Aq3Xv-VjVpxSdGs0cTJ0UTNXMmtJYmNVMTBUOU0xQVE")
Correct <- read.csv("Antwoorden.csv", header = TRUE, sep = ",", quote = "\"",
, fill = TRUE, stringsAsFactors = FALSE)
## Create new data frame with selected student data, compare answers with correct solution
## and create per question a new column with scores.
TtsScore <- TtsData[c(2:7, 9)]
TtsScore[8:29] <- sapply(10:31, function(x) as.numeric(Correct[2,x-9])*grepl(Correct[1,x-9], TtsData[[x]])
+ as.numeric(Correct[2,x+13])*grepl(Correct[1,x+13], TtsData[[22+x]]))
TtsScore[8:29]
## Function to read in Google Spreadsheet (old method)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="", stringsAsFactors = FALSE)
}
## Read in data from Google and correct answers from csv file
TtsData <- google_ss(gid=0, key = "0Aq3Xv-VjVpxSdGs0cTJ0UTNXMmtJYmNVMTBUOU0xQVE")
Correct <- read.csv("Antwoorden.csv", header = TRUE, sep = ",", quote = "\"",
, fill = TRUE, stringsAsFactors = FALSE)
## Create new data frame with selected student data, compare answers with correct solution
## and create per question a new column with scores.
TtsScore <- TtsData[c(2:7, 9)]
TtsScore[8:29] <- sapply(10:31, function(x) as.numeric(Correct[2,x-9])*grepl(Correct[1,x-9], TtsData[[x]])
+ as.numeric(Correct[2,x+13])*grepl(Correct[1,x+13], TtsData[[22+x]]))
TtsScore[8:29]
TtsScore$Tot <- sum(TtsScore[8:29])
TtsScore$Tot
TtsScore$Tot <- sapply(TtsScore[8:29], sum)
TtsScore$Tot <- apply(TtsScore[8:29], margin = 1, sum)
TtsScore$Tot <- apply(TtsScore[8:29], margin = 1, fun = sum)
TtsScore$Tot <- apply(TtsScore[8:29], margin = 1, fun = sum())
TtsScore$Tot <- rowSums(TtsScore[8:29])
TtsScore$Tot
TtsScore[8:29]
TtsScore[8:30]
TtsScore$Score <- TtsScore$Tot/6.6
TtsScore[8:31]
TtsScore$Score <- round(TtsScore$Tot/6.6, 0)
TtsScore[8:31]
TtsScore$Score <- round(TtsScore$Tot/6.6, 1)
TtsScore[8:31]
## Function to read in Google Spreadsheet (old method)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="", stringsAsFactors = FALSE)
}
## Read in data from Google and correct answers from csv file
TtsData <- google_ss(gid=0, key = "0Aq3Xv-VjVpxSdGs0cTJ0UTNXMmtJYmNVMTBUOU0xQVE")
Correct <- read.csv("Antwoorden.csv", header = TRUE, sep = ",", quote = "\"",
, fill = TRUE, stringsAsFactors = FALSE)
## Create new data frame with selected student data, compare answers with correct solution
## and create per question a new column with scores.
TtsScore <- TtsData[c(2:7, 9)]
TtsScore[8:29] <- sapply(10:31, function(x) as.numeric(Correct[2,x-9])*grepl(Correct[1,x-9], TtsData[[x]])
+ as.numeric(Correct[2,x+13])*grepl(Correct[1,x+13], TtsData[[22+x]]))
TtsScore$Tot <- rowSums(TtsScore[8:29])
TtsScore$Score <- round(TtsScore$Tot/6.6, 1)
TtsScore[8:31]
## Function to read in Google Spreadsheet (old method)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="", stringsAsFactors = FALSE)
}
## Read in data from Google and correct answers from csv file
TtsData <- google_ss(gid=0, key = "0Aq3Xv-VjVpxSdGs0cTJ0UTNXMmtJYmNVMTBUOU0xQVE")
TtsData
fix(TtsData)
