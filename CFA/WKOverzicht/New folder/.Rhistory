shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('GitHub/Quizii/Rekentoets')
shiny::runApp('C:/Users/NB/Google Drive/CFA (1)/R/Quizii/WK4')
shiny::runApp('GitHub/CFA/WK1')
i^2
i
x<-0
y<-1
z<-complex(x,y)
z^2
1+z
z
z<-complex(real=x,imaginary=y)
z
z^2
1+z
z
1-1+0i
1.08^9
1.06^12
1.05^15
1.05^14
shiny::runApp('C:/Users/NB/Google Drive/CFA/R/Quizii/Rekentoets')
shiny::runApp('GitHub/Quizii/Nadi')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
shiny::runApp('GitHub/CFA/WKOverzicht')
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=csv"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=csv"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/pub?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE&single=true&gid=0&output=html"
FinData <- readSpreadsheet(url)
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheet/ccc?key=0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE#gid=0"
FinData <- readSpreadsheet(url)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
FinData
fix(FinData)
summary(FinData)
str(FinData)
FinData13 <- FinData([Findata$Boekjaar = 2013],)
FinData13 <- FinData[Findata$Boekjaar = 2013]
FinData13 <- FinData([Findata$Boekjaar = 2013],)
FinData13 <- subset(FinData, Boekjaar = 2013)
str(FinData13)
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar = 2013)
str(FinData13)
FinData13 <- subset(FinData, Boekjaar == 2013)
str(FinData13)
TotAssVal <- colSums(FinData13$Balanstotaal.activa, na.rm = TRUE)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)
TotAssVal
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotAssVal
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
MeanSolvency
str(FinData13)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * FinData13$Beurskoers.aandelen.ultimo.boekjaar
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
FinData13$MarketCap
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar == 2013)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen.activa, na.rm = TRUE)/1000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotEqBkVal
FinData13$Totaal.eigen.vermogen
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
TotEqMktVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
TotLiabVal
str(FinData13)
fix(FinData13)
fix(FinData)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
google_ss <- function(gid = NA, key = NA)
{
if (is.na(gid)) {stop("\nWorksheetnumber (gid) is missing\n")}
if (is.na(key)) {stop("\nDocumentkey (key) is missing\n")}
require(RCurl)
url <- getURL(paste("https://docs.google.com/spreadsheet/pub?key=", key,
"&single=true&gid=", gid, "&output=csv", sep = ""),
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
read.csv(textConnection(url), header = T, sep = ",", na.strings="")
}
FinData <- google_ss(gid=0, key = "0AruoI3aZvJFydGdWdHFtTG5GLUxvY1FpN09qZTNlNkE")
str(FinData)
FinData13 <- subset(FinData, Boekjaar == 2013)
FinData13$MarketCap <- FinData13$Aantal.uitstaande.aandelen.ultimo.boekjaar * as.numeric(FinData13$Beurskoers.aandelen.ultimo.boekjaar)
str(FinData13)
TotAssVal <- sum(FinData13$Balanstotaal.activa, na.rm = TRUE)/1000000000
TotEqBkVal <- sum(FinData13$Totaal.eigen.vermogen, na.rm = TRUE)/1000000000
TotEqMktVal <- sum(FinData13$MarketCap, na.rm = TRUE)/1000000000
TotLiabVal <- sum(FinData13$Balanstotaal.passiva, na.rm = TRUE)/1000000000
MeanSolvency <- mean(FinData13$Totaal.eigen.vermogen / FinData13$Balanstotaal.passiva)*100
print(c(TotAssVal, TotEqBkVal, TotEqMktVal, MeanSolvency))
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresOverv <- ScoresAll[c(12, 13, 14, 1, 15, 16, 17, 3, 8)]
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1),]
setwd("~/GitHub/CFA/WKOverzicht/New folder")
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresOverv <- ScoresAll[c(12, 13, 14, 1, 15, 16, 17, 3, 8)]
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1),]
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheets/d/1hhQLPOAiULCWBfWEXvjmsoDUMiGmIreZWggagk_I-Q0/pubhtml?gid=479611730&single=true"
WK6Data <- readSpreadsheet(url)
# Split string into elements by comma, add to separate columns and rename columns
# Only select relevant colums and unique records and delete whitespaces from 'ID'
tmp <- matrix(unlist(strsplit(WK5Data$Studentgegevens, ",")), ncol=4,
byrow=TRUE)
WK6Data <- cbind(WK6Data, as.data.frame(tmp))
colnames(WK6Data)[c(3:7)] <- c('Score','Last2', 'First', 'Last1', 'ID')
WK6Data <- WK6Data[2:7]
WK6Data <- unique(WK6Data)
WK6Data$ID <- str_trim(WK6Data$ID, side = "both")
library(shiny)
library(xtable)
library(stringr)
# Function to read Google Spreadheet
readSpreadsheet <- function(url, sheet = 1){
library(XML)
library(httr)
r <- GET(url)
html <- content(r)
sheets <- readHTMLTable(html, header=FALSE, stringsAsFactors=FALSE)
df <- sheets[[sheet]]
dfClean <- function(df){
nms <- t(df[1,])
names(df) <- nms
df <- df[-1,-1]
df <- df[df[,1] != "",]
row.names(df) <- seq(1,nrow(df))
df
}
dfClean(df)
}
# Read data from Google Spreadsheet
url <- "https://docs.google.com/spreadsheets/d/1hhQLPOAiULCWBfWEXvjmsoDUMiGmIreZWggagk_I-Q0/pubhtml?gid=479611730&single=true"
WK6Data <- readSpreadsheet(url)
# Split string into elements by comma, add to separate columns and rename columns
# Only select relevant colums and unique records and delete whitespaces from 'ID'
tmp <- matrix(unlist(strsplit(WK6Data$Studentgegevens, ",")), ncol=4,
byrow=TRUE)
WK6Data <- cbind(WK6Data, as.data.frame(tmp))
colnames(WK6Data)[c(3:7)] <- c('Score','Last2', 'First', 'Last1', 'ID')
WK6Data <- WK6Data[2:7]
WK6Data <- unique(WK6Data)
WK6Data$ID <- str_trim(WK6Data$ID, side = "both")
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK6"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresOverv <- ScoresAll[c(12, 13, 14, 1, 15, 16, 17, 3, 8)]
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1),]
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK6"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresOverv <- ScoresAll[c(12, 13, 14, 1, 15, 16, 17, 3, 8)]
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1),]
ScoresAll
fix(ScoresAll)
str(ScoresAll)
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK6"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
names(ScoresAll$Score) <- "Score.WK6"
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresOverv <- ScoresAll[c(12, 13, 14, 1, 15, 16, 17, 3, 8)]
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1),]
str(ScoresAll)
names(ScoresAll[ScoresAll$Score]) <- "Score.WK6"
names(ScoresAll)[ScoresAll$Score] <- "Score.WK6"
names(ScoresAll)[13] <- "Score.WK6"
str(ScoresAll)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresOverv
str(ScoresOverv)
str(ScoresAll)
# Load data frames
source('MetaData.R')
source('ScoresWK4.R')
source('ScoresWK5.R')
source('ScoresWK6.R')
# Merge the data frames by 'ID' variable
ScoresAll <- merge(WK4Data, WK5Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c(".WK4",".WK5"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, WK6Data,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE, suffixes = c("",".WK6"),
incomparables = NULL)
ScoresAll <- merge(ScoresAll, MetaData,
by.x = 'ID', by.y = 'ID', all = TRUE, all.x = TRUE, all.y = TRUE,
sort = TRUE,
incomparables = NULL)
names(ScoresAll)[13] <- "Score.WK6"
ScoresAll$Score.WK4 <- round(as.numeric(ScoresAll$Score.WK4)/1.6, 1)
ScoresAll$Score.WK5 <- round(as.numeric(ScoresAll$Score.WK5)/1.6, 1)
ScoresAll$Score.WK6 <- round(as.numeric(ScoresAll$Score.WK6)/1.6, 1)
ScoresOverv <- ScoresAll[c(17, 18, 19, 1, 20, 21, 22, 3, 8, 13)]
ScoresOverv <- ScoresOverv[order(ScoresOverv$Last1),]
str(ScoresOverv)
shiny::runApp()
shiny::runApp('~/GitHub/CFA/WKOverzicht')
